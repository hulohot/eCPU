name: eCPU CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
    
    - name: Check Python formatting with Black
      run: |
        black --check verification/ scripts/ || true
    
    - name: Lint Python code with flake8
      run: |
        flake8 verification/ scripts/ || true
    
    - name: Install Verilator
      run: |
        sudo apt-get update
        sudo apt-get install -y verilator
    
    - name: Lint SystemVerilog/Verilog files
      run: |
        # Basic syntax check with Verilator
        find rtl/ -name "*.sv" -o -name "*.v" | head -5 | while read file; do
          echo "Checking $file"
          verilator --lint-only -Wall "$file" || echo "Lint warnings in $file"
        done

  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y verilator gtkwave
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cocotb cocotb-test pytest pytest-cov pytest-xdist
    
    - name: Run ALU tests
      run: |
        cd verification/cocotb
        python -m pytest test_alu.py -v || echo "ALU tests need implementation"
      continue-on-error: true
    
    - name: Run Register File tests
      run: |
        cd verification/cocotb
        python -m pytest test_regfile.py -v || echo "Register file tests need implementation"
      continue-on-error: true
    
    - name: Generate test coverage
      run: |
        cd verification
        python -m pytest --cov=../rtl --cov-report=html --cov-report=xml || echo "Coverage collection needs setup"
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./verification/coverage.xml
        fail_ci_if_error: false

  synthesis-check:
    runs-on: ubuntu-latest
    name: Synthesis Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install synthesis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y yosys fpga-icestorm nextpnr-ice40
    
    - name: Check basic synthesis
      run: |
        # Quick synthesis check for individual modules
        echo "module test_alu; alu u_alu(.operand_a_i(32'h0), .operand_b_i(32'h0), .alu_op_i(4'h0), .result_o(), .zero_o(), .negative_o(), .overflow_o(), .carry_o()); endmodule" > test_synth.v
        yosys -p "read_verilog rtl/core/alu.sv test_synth.v; hierarchy -top test_alu; proc; opt; stat" || echo "ALU synthesis check failed"
      continue-on-error: true
    
    - name: iCEBreaker synthesis check
      run: |
        # This will fail until we have a complete top-level, but checks tool installation
        make synth-check || echo "Full synthesis not yet available"
      continue-on-error: true

  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y verilator
        python -m pip install --upgrade pip
        pip install cocotb cocotb-test pytest
    
    - name: Run integration tests
      run: |
        # These will be added as the CPU implementation progresses
        echo "Integration tests will be added as modules are completed"
      continue-on-error: true

  documentation:
    runs-on: ubuntu-latest
    name: Documentation Build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme pandoc
        sudo apt-get install -y pandoc
    
    - name: Build documentation
      run: |
        make docs || echo "Documentation build not yet configured"
      continue-on-error: true
    
    - name: Check README and important docs
      run: |
        # Ensure key documentation files exist and are valid
        test -f README.md || exit 1
        test -f TODO.md || exit 1
        test -f PROJECT_SPEC.md || exit 1
        echo "Key documentation files present"

  project-status:
    runs-on: ubuntu-latest
    name: Project Status
    needs: [lint, unit-tests, synthesis-check]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Project status summary
      run: |
        echo "=== eCPU Project Status ==="
        echo "Lint job: ${{ needs.lint.result }}"
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Synthesis check: ${{ needs.synthesis-check.result }}"
        echo ""
        echo "File counts:"
        find rtl/ -name "*.sv" -o -name "*.v" | wc -l | xargs echo "RTL files:"
        find verification/ -name "*.py" | wc -l | xargs echo "Test files:"
        echo ""
        echo "Recent commits:"
        git log --oneline -5 || echo "No git history" 