name: eCPU CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
    
    - name: Check Python formatting with Black
      run: |
        black --check verification/ scripts/
    
    - name: Lint Python code with flake8
      run: |
        flake8 verification/ scripts/
    
    - name: Install Verilator
      run: |
        sudo apt-get update
        sudo apt-get install -y verilator
    
    - name: Lint SystemVerilog/Verilog files
      run: |
        # Basic syntax check with Verilator
        lint_failed=0
        find rtl/ -name "*.sv" -o -name "*.v" | head -5 | while read file; do
          echo "Checking $file"
          if ! verilator --lint-only -Wall "$file"; then
            echo "Lint failed for $file"
            lint_failed=1
          fi
        done
        if [ $lint_failed -eq 1 ]; then
          echo "SystemVerilog linting failed"
          exit 1
        fi

  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y verilator gtkwave
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        echo "Installing cocotb dependencies directly..."
        pip install cocotb>=1.8.0
        pip install cocotb-test>=0.2.4
        pip install pytest>=7.0.0
        pip install pytest-cov pytest-xdist
        pip install rich>=13.0.0
        echo "Installed packages:"
        pip list | grep -E "(cocotb|pytest|rich)"
        echo "Python path:"
        python -c "import sys; print('\\n'.join(sys.path))"
    
    - name: Verify cocotb installation
      run: |
        python -c "import cocotb; print(f'cocotb version: {cocotb.__version__}')"
        python -c "import cocotb_test; print('cocotb_test imported successfully')"
    
    - name: Run ALU tests
      run: |
        cd verification/cocotb
        if [ -f test_alu.py ] && [ -f ../../rtl/core/alu.sv ]; then
          echo "Attempting to run ALU tests..."
          if make test-alu; then
            echo "✅ ALU tests passed via Makefile"
          else
            echo "⚠️ Makefile approach failed, trying alternative runner..."
            python run_test.py alu
          fi
        else
          echo "ALU tests or RTL not yet implemented - skipping"
          echo "TODO: Implement ALU tests" > test_results.txt
        fi
    
    - name: Run Register File tests
      run: |
        cd verification/cocotb
        if [ -f test_regfile.py ] && [ -f ../../rtl/core/regfile.sv ]; then
          echo "Attempting to run Register File tests..."
          if make test-regfile; then
            echo "✅ Register File tests passed via Makefile"
          else
            echo "⚠️ Makefile approach failed, trying alternative runner..."
            python run_test.py regfile
          fi
        else
          echo "Register file tests or RTL not yet implemented - skipping"
          echo "TODO: Implement register file tests" >> test_results.txt
        fi
    
    - name: Run additional core tests
      run: |
        cd verification/cocotb
        test_failures=0
        
        # Test instruction memory if available
        if [ -f test_instruction_memory.py ] && [ -f ../../rtl/memory/instruction_memory.sv ]; then
          echo "Running instruction memory tests..."
          make test-instruction_memory || test_failures=1
        fi
        
        # Test data memory if available  
        if [ -f test_data_memory.py ] && [ -f ../../rtl/memory/data_memory.sv ]; then
          echo "Running data memory tests..."
          make test-data_memory || test_failures=1
        fi
        
        # Test fetch stage if available
        if [ -f test_fetch.py ] && [ -f ../../rtl/core/fetch.sv ]; then
          echo "Running fetch stage tests..."
          make test-fetch || test_failures=1
        fi
        
        # Test decode stage if available
        if [ -f test_decode.py ] && [ -f ../../rtl/core/decode.sv ]; then
          echo "Running decode stage tests..."
          make test-decode || test_failures=1
        fi
        
        if [ $test_failures -eq 1 ]; then
          echo "Some cocotb tests failed"
          exit 1
        fi
    
    - name: Generate test coverage
      run: |
        cd verification/cocotb
        # Cocotb generates VCD files for coverage analysis
        echo "Test artifacts generated:"
        ls -la sim_build/ 2>/dev/null || echo "No simulation build directory found"
        ls -la *.vcd 2>/dev/null || echo "No VCD files found"
        echo "Coverage analysis will be added in future iterations"
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./verification/coverage.xml
        fail_ci_if_error: false

  synthesis-check:
    runs-on: ubuntu-latest
    name: Synthesis Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install synthesis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y yosys fpga-icestorm nextpnr-ice40
    
    - name: Check basic synthesis
      run: |
        # Quick synthesis check for individual modules
        synthesis_failed=0
        
        # Check if ALU module exists and can be synthesized
        if [ -f rtl/core/alu.sv ]; then
          echo "module test_alu; alu u_alu(.operand_a_i(32'h0), .operand_b_i(32'h0), .alu_op_i(4'h0), .result_o(), .zero_o(), .negative_o(), .overflow_o(), .carry_o()); endmodule" > test_synth.v
          if ! yosys -p "read_verilog rtl/core/alu.sv test_synth.v; hierarchy -top test_alu; proc; opt; stat"; then
            echo "ALU synthesis check failed"
            synthesis_failed=1
          fi
          rm -f test_synth.v
        else
          echo "ALU module not found - skipping synthesis check"
        fi
        
        if [ $synthesis_failed -eq 1 ]; then
          echo "Synthesis checks failed"
          exit 1
        fi
    
    - name: iCEBreaker synthesis check
      run: |
        # This will fail until we have a complete top-level, but checks tool installation
        make synth-check || echo "Full synthesis not yet available - this is expected during development"
      continue-on-error: true

  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y verilator
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install -r verification/cocotb/requirements.txt
    
    - name: Run integration tests
      run: |
        cd verification/cocotb
        # Run CPU integration test if top-level and all dependencies exist
        if [ -f test_cpu_integration.py ] && [ -f ../../rtl/core/eCPU_top.sv ]; then
          echo "Running CPU integration tests..."
          make test-cpu-integration
        else
          echo "CPU integration tests will be added as top-level module is completed"
        fi
      continue-on-error: true

  documentation:
    runs-on: ubuntu-latest
    name: Documentation Build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme pandoc
        sudo apt-get install -y pandoc
    
    - name: Build documentation
      run: |
        make docs || echo "Documentation build not yet configured"
      continue-on-error: true
    
    - name: Check README and important docs
      run: |
        # Ensure key documentation files exist and are valid
        test -f README.md || exit 1
        test -f TODO.md || exit 1
        test -f PROJECT_SPEC.md || exit 1
        echo "Key documentation files present"

  project-status:
    runs-on: ubuntu-latest
    name: Project Status
    needs: [lint, unit-tests, synthesis-check]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Project status summary
      run: |
        echo "=== eCPU Project Status ==="
        echo "Lint job: ${{ needs.lint.result }}"
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Synthesis check: ${{ needs.synthesis-check.result }}"
        echo ""
        echo "File counts:"
        find rtl/ -name "*.sv" -o -name "*.v" | wc -l | xargs echo "RTL files:"
        find verification/ -name "*.py" | wc -l | xargs echo "Test files:"
        echo ""
        echo "Recent commits:"
        git log --oneline -5 || echo "No git history"
        
        # Fail this job if critical jobs failed
        if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.unit-tests.result }}" == "failure" || "${{ needs.synthesis-check.result }}" == "failure" ]]; then
          echo "❌ Critical checks failed - PR should not be merged"
          exit 1
        else
          echo "✅ All critical checks passed"
        fi 